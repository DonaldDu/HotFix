apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.dhy.hotfix.demo"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
//            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(path: ':hotfix')
}

task genDexOnlyApk(group: 'patch', dependsOn: ['assembleDebug']) {
    doLast{
        def apk = new File(project.buildDir, '\\outputs\\apk\\debug').listFiles().find {
            it.name.endsWith('.apk') && it.name.contains('debug')
        }
        File dexOnlyFile = genDexOnlyApk(apk)

        copy {
            def old = file("${project.projectDir}\\src\\main\\assets\\patch\\" + dexOnlyFile.name)
            if (old.exists()) old.delete()
            from dexOnlyFile.absolutePath
            into { old.parentFile.absolutePath }
        }
    }
}
